# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"bayes_search_CV_init": "00-utilities.ipynb",
         "BayesSearchCV.__init__": "00-utilities.ipynb",
         "bayes_search_CV__fit": "00-utilities.ipynb",
         "add_series_index": "00-utilities.ipynb",
         "PandasRandomForestRegressor": "00-utilities.ipynb",
         "convert_file_to_json": "00-utilities.ipynb",
         "encode_file_as_utf8": "00-utilities.ipynb",
         "convert_nbs_to_md": "00-utilities.ipynb",
         "junix.exporter.convert_file_to_json": "00-utilities.ipynb",
         "MyHTMLParser": "00-utilities.ipynb",
         "convert_df_to_md": "00-utilities.ipynb",
         "extract_div_to_md_table": "00-utilities.ipynb",
         "extract_div_to_md_tables": "00-utilities.ipynb",
         "clean_md_file_tables": "00-utilities.ipynb",
         "get_substring_idxs": "00-utilities.ipynb",
         "clean_md_file_img_fps": "00-utilities.ipynb",
         "AxTransformer": "00-utilities.ipynb",
         "set_date_ticks": "00-utilities.ipynb",
         "reindex_df_dt_idx": "01-cleaning.ipynb",
         "load_training_dataset": "01-cleaning.ipynb",
         "combine_training_datasets": "01-cleaning.ipynb",
         "identify_df_dt_entries": "01-cleaning.ipynb",
         "construct_df_temp_features": "01-cleaning.ipynb",
         "split_X_y_data": "01-cleaning.ipynb",
         "split_X_y_data_with_index": "01-cleaning.ipynb",
         "generate_kfold_preds": "01-cleaning.ipynb",
         "evaluate_models": "01-cleaning.ipynb",
         "interpolate_missing_panel_temps": "01-cleaning.ipynb",
         "construct_df_irradiance_features": "01-cleaning.ipynb",
         "interpolate_missing_site_irradiance": "01-cleaning.ipynb",
         "construct_df_power_features": "01-cleaning.ipynb",
         "pv_anomalies_to_nan": "01-cleaning.ipynb",
         "interpolate_missing_site_power": "01-cleaning.ipynb",
         "interpolate_missing_weather_solar": "01-cleaning.ipynb",
         "construct_df_discharge_features": "02-discharging.ipynb",
         "estimate_daily_demand_quantiles": "02-discharging.ipynb",
         "sample_random_day": "02-discharging.ipynb",
         "sample_random_days": "02-discharging.ipynb",
         "reset_idx_dt": "02-discharging.ipynb",
         "extract_evening_demand_profile": "02-discharging.ipynb",
         "flatten_peak": "02-discharging.ipynb",
         "construct_discharge_profile": "02-discharging.ipynb",
         "construct_discharge_s": "02-discharging.ipynb",
         "extract_evening_datetimes": "02-discharging.ipynb",
         "normalise_total_discharge": "02-discharging.ipynb",
         "clip_discharge_rate": "02-discharging.ipynb",
         "post_pred_discharge_proc_func": "02-discharging.ipynb",
         "construct_peak_reduction_calculator": "02-discharging.ipynb",
         "evaluate_discharge_models": "02-discharging.ipynb",
         "prepare_training_input_data": "03-charging.ipynb",
         "fit_and_save_model": "02-discharging.ipynb",
         "load_trained_model": "02-discharging.ipynb",
         "load_latest_submission_template": "02-discharging.ipynb",
         "prepare_latest_test_feature_data": "03-charging.ipynb",
         "optimise_latest_test_discharge_profile": "02-discharging.ipynb",
         "estimate_daily_solar_quantiles": "03-charging.ipynb",
         "extract_solar_profile": "03-charging.ipynb",
         "charge_profile_greedy": "03-charging.ipynb",
         "topup_charge_naive": "03-charging.ipynb",
         "optimal_charge_profile": "03-charging.ipynb",
         "construct_charge_profile": "03-charging.ipynb",
         "construct_charge_s": "03-charging.ipynb",
         "charge_is_valid": "03-charging.ipynb",
         "construct_df_charge_features": "03-charging.ipynb",
         "extract_charging_datetimes": "03-charging.ipynb",
         "normalise_total_charge": "03-charging.ipynb",
         "clip_charge_rate": "03-charging.ipynb",
         "post_pred_charge_proc_func": "03-charging.ipynb",
         "prop_max_solar": "03-charging.ipynb",
         "construct_solar_exploit_calculator": "03-charging.ipynb",
         "fit_and_save_charging_model": "03-charging.ipynb",
         "optimise_latest_test_charge_profile": "03-charging.ipynb",
         "check_for_nulls": "04-constraints.ipynb",
         "construct_charge_state_s": "04-constraints.ipynb",
         "check_capacity_constraints": "04-constraints.ipynb",
         "doesnt_exceed_charge_state_min": "04-constraints.ipynb",
         "doesnt_exceed_charge_state_max": "04-constraints.ipynb",
         "check_full_utilisation": "04-constraints.ipynb",
         "check_all_values_equal": "04-constraints.ipynb",
         "charge_state_always_drops_to_0MWh": "04-constraints.ipynb",
         "charge_state_always_gets_to_6MWh": "04-constraints.ipynb",
         "check_rate_constraints": "04-constraints.ipynb",
         "doesnt_exceed_charge_rate_min": "04-constraints.ipynb",
         "doesnt_exceed_charge_rate_max": "04-constraints.ipynb",
         "check_charging_patterns": "04-constraints.ipynb",
         "charge_is_0_at_midnight": "04-constraints.ipynb",
         "all_charge_periods_charge": "04-constraints.ipynb",
         "all_discharge_periods_discharge": "04-constraints.ipynb",
         "all_inactive_periods_do_nothing": "04-constraints.ipynb",
         "schedule_is_legal": "04-constraints.ipynb"}

modules = ["utils.py",
           "clean.py",
           "discharge.py",
           "charge.py",
           "constraints.py",
           "pipeline.py"]

doc_url = "https://AyrtonB.github.io/WPD-DS-Challenge/"

git_url = "https://github.com/AyrtonB/WPD-DS-Challenge"

def custom_doc_links(name): return None
