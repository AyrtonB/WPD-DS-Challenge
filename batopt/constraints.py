# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04-battery-constraints.ipynb (unless otherwise specified).

__all__ = ['charge_to_capacity', 'schedule_is_legal']

# Cell
import numpy as np
import pandas as pd

# Cell

def charge_to_capacity(charge_schedule, init_value=0):
    capacity = np.append(np.array([init_value]), np.cumsum(charge_schedule[:-1]/2))
    return capacity

# Cell

def schedule_is_legal(schedule, B_min=-2.5, B_max=2.5, C_min=0, C_max=6,
                      charge_times=('00:00', '15:00'), discharge_times=('15:30', '20:30'),
                      no_activity_times=('21:00', '23:30'), tolerance=1e-09):
    """
    Determine if a battery schedule meets constraints
    """

    charge = schedule.charge_MW.values
    capacity = charge_to_capacity(schedule.charge_MW.values)
    schedule['capacity'] = capacity
    schedule = schedule.set_index(pd.to_datetime(schedule.index))

    if not np.all((charge >= B_min-tolerance) & (charge <= (B_max+tolerance))): # charge constraints
        print("Charge constraint violated")
        return False
    elif not np.all((capacity >= C_min-tolerance) & (capacity <= (C_max+tolerance))): # capacity constraints
        print("Capacity constraint violated")
        return False
    elif np.any(schedule.between_time(discharge_times[0], discharge_times[1]).charge_MW.values > (0+tolerance)): # Discharge between discharge_times
        print("Attempted to charge during the discharge period")
        return False
    elif np.any(schedule.between_time(charge_times[0], charge_times[1]).charge_MW.values < (0-tolerance)): # Charge between charge_times
        print("Attempted to discharge during the charge period")
        return False
    elif np.logical_not(
                        np.any(
                               np.isclose(schedule.between_time(no_activity_times[0], no_activity_times[1]).charge_MW.values, 0))): # No activity between no_activity_times
        print("Attempted to discharge or charge during the no activity period")
        return False
    elif np.logical_not(np.any(np.isclose(schedule.between_time('00:00', '00:00').capacity.values, 0))): # Must be empty at 00:00
        print("Battery is not empty at 00:00")
        return False
    else:
        return True
